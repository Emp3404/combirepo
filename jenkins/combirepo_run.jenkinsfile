def ksFile
def logFile
def pkgFile
def micFile
def micDir
def cacheDir
def unified_repo_name
def unified_asan_repo_name
def pkgURL
def pkgTmp
def ks_tmp

pipeline {
  agent {
    docker {
      image "${params.DOCKER_IMAGE}"
      args "--privileged -u root:root"
    }
  }

  options {
    skipDefaultCheckout true
  }

  environment {
    OBS = credentials("${params.OBS_ACCOUNT_ID}")
  }

  stages {
    stage('Parameters initialization') {
      steps {
          
        script {        
          sh '''
          wget -q 'http://10.113.136.32/download_trbs/snapshots/devel/san/5.5-unified-asan/latest/build.xml' --user ${OBS_USR} --password ${OBS_PSW}
          ks=$(cat *.xml | grep san-tizen-5.5-unified-asan_)
          ks=$(echo $ks | cut -c5-41)
          ks="http://10.113.136.32/download_trbs/snapshots/devel/san/5.5-unified-asan/latest/images/standard/mobile-wayland-armv7l-tm1/"$ks"_mobile-wayland-armv7l-tm1.ks"
          echo ${ks} > res
          rm -rf build*
          '''
          ks_tmp=readFile('res').trim()
          sh 'rm -rf res'
        
          ksFile = "local.ks"
          logFile = "local.log"
          pkgFile = "local.packages"
          micFile = "/etc/mic/mic.conf"
          micDir = params.OUTDIR
          cacheDir = params.CACHEDIR
          pkgURL = ks_tmp.replace('.ks','.packages')
          pkgTmp = "tmp.packages"
          unified_repo_name=""
          unified_asan_repo_name=""
          if (params.ARCH == "armv7l") {
            unified_repo_name="unified-standard"
            unified_asan_repo_name="unified-standard-asan"
          } else if (params.ARCH == "i686") {
            unified_repo_name="unified-emulator"
            unified_asan_repo_name="unified-emulator-asan"
          }
        }
      }
    }
    
    stage('Build') {
      steps {
        sh """
        rm -rf ${micDir} ${cacheDir} ./*

        wget ${pkgURL} -O ${pkgTmp} --user ${OBS_USR} --password ${OBS_PSW}
        if [ ! -f ${pkgTmp} ]; then
          echo "Packages file not found!"
          exit 1
        else
          cat ${pkgTmp} | awk '{print \$1}' | sed -e 's|.${params.ARCH}||g' | sed -e 's|.noarch||g' | sort -n > ${pkgFile}
        fi
        
        wget ${ks_tmp} -O ${ksFile} --user ${OBS_USR} --password ${OBS_PSW}
        if [ ! -f ${ksFile} ]; then
            echo "Kickstart file not found!"
            exit 1
        fi

        unified_repo=`cat ${ksFile} | grep 'repo --name=${unified_repo_name} --baseurl=' | egrep -o 'https?://[^ ]+'`
        unified_asan_repo=`cat ${ksFile} | grep 'repo --name=${unified_asan_repo_name} --baseurl=' | egrep -o 'https?://[^ ]+'`
        base_repo=`cat ${ksFile} | grep 'repo --name=base-standard --baseurl=' | egrep -o 'https?://[^ ]+'`
        base_asan_repo=`cat ${ksFile} | grep 'repo --name=base-standard-asan --baseurl=' | egrep -o 'https?://[^ ]+'`

        sed -i "/${unified_asan_repo_name}/d" ${ksFile}
        sed -i "/base-standard-asan/d" ${ksFile}
        sed -i "s/%prepackages/%prepackages\\nlibasan/g" ${ksFile}

        if ${params.MIRROR}; then mirror="--mirror"; else mirror=""; fi
        if ${params.GREEDY}; then greedy="--greedy"; else greedy=""; fi
        if ${params.DISABLE_RPM_PATCHING}; then rpm_patching="--disable-rpm-patching"; else rpm_patching=""; fi
        if ${params.DEBUG}; then debug="--debug"; else debug=""; fi
        if ${params.VERBOSE}; then verbose="--verbose"; else verbose=""; fi
        if [ ! -z ${params.FORWARD} ]; then forward="-f ${params.FORWARD}"; else forward=""; fi
        if [ ! -z ${params.BACKWARD} ]; then backward="-b ${params.BACKWARD}"; else backward=""; fi
        if [ ! -z ${params.SINGLE} ]; then single="-s ${params.SINGLE}"; else single=""; fi
        if [ ! -z ${params.EXCLUDE} ]; then exclude="-e ${params.EXCLUDE}"; else exclude=""; fi
        if [ ! -z ${params.PREFERABLE} ]; then preferable="-p ${params.PREFERABLE}"; else preferable=""; fi
        if [ ! -z ${params.GROUPS_SINGLE} ]; then groups_single="--groups-single ${params.GROUPS_SINGLE}"; else groups_single=""; fi
        if [ ! -z ${params.GROUPS_FORWARD} ]; then groups_forward="--groups-forward ${params.GROUPS_FORWARD}"; else groups_forward=""; fi
        if [ ! -z ${params.GROUPS_BACKWARD} ]; then groups_backward="--groups-backward ${params.GROUPS_BACKWARD}"; else groups_backward=""; fi

        mkdir -p ${micDir}
        mkdir -p ${cacheDir}

        echo "${BUILD_URL}" > ${micDir}/info.txt

        mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc

        combirepo -A ${params.ARCH} -k ${ksFile} --packages-file ${pkgFile} --user ${OBS_USR} --password ${OBS_PSW} \
          -o ${micDir} -l ${logFile} --tmp-dir ${cacheDir} -j ${params.JOBS_NUMBER} \
          \${greedy} \${mirror} \${rpm_patching} \${debug} \${verbose} \
          --regenerate-repodata --preferring-strategy big --skip-version-mismatch --mic-config ${micFile} \
          -S asan-runtime-env \
          \${forward} \${backward} \${single} \${exclude} \${preferable} \
          \${groups_single} \${groups_forward} \${groups_backward} \
          ${unified_repo_name} \${unified_repo} \${unified_asan_repo} \
          base-standard \${base_repo} \${base_asan_repo}
        """
      }
    }
  }
  post {
    always {
        echo 'Test run completed!'
        archiveArtifacts artifacts: "${ksFile}"
        archiveArtifacts artifacts: "${pkgFile}"
        archiveArtifacts artifacts: "${logFile}"
        archiveArtifacts artifacts: "${micDir}/*"
    }
    success {
        echo 'Successfully!'
    }
    failure {
        echo 'Failed!'
    }
  }
}
